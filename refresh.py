import psycopg2
import os
import yaml
import argparse
from config import DB_CONFIG
from datetime import datetime

def log_message(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {message}")

def run_benchmarks(cursor):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö"""
    log_message("–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
    benchmark_file = '/Users/benchmarks.yaml'
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –∏–∑ YAML-—Ñ–∞–π–ª–∞
        with open(benchmark_file, 'r') as file:
            benchmarks = yaml.safe_load(file)
        
        if not benchmarks:
            log_message("–§–∞–π–ª –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return
        
        total_tests = 0
        passed_tests = 0
        failed_tests = 0
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞
        for benchmark in benchmarks:
            table_name = benchmark.get('table')
            tests = benchmark.get('tests', [])
            
            log_message(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            log_message("-" * 80)
            
            for test in tests:
                total_tests += 1
                query = test.get('query')
                expected = test.get('expected')
                column = test.get('column', None)
                description = test.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                
                log_message(f"–¢–µ—Å—Ç: {description}")
                log_message(f"–ó–∞–ø—Ä–æ—Å: {query}")
                
                try:
                    cursor.execute(query)
                    result = cursor.fetchall()
                    
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if column is not None and result:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
                        column_names = [desc[0] for desc in cursor.description]
                        if column in column_names:
                            column_index = column_names.index(column)
                            actual_value = result[0][column_index] if result else None
                            log_message(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Å—Ç–æ–ª–±–µ—Ü: {column}")
                        else:
                            log_message(f"‚ùå –û—à–∏–±–∫–∞: –°—Ç–æ–ª–±–µ—Ü '{column}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞")
                            failed_tests += 1
                            log_message("-" * 40)
                            continue
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                    elif expected.get('count') is not None:
                        actual_value = len(result)
                        log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫")
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                    else:
                        actual_value = result[0][0] if result else None
                        log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if 'value' in expected:
                        expected_value = expected['value']
                    elif 'count' in expected:
                        expected_value = expected['count']
                    else:
                        log_message(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–µ–Ω—á–º–∞—Ä–∫–µ")
                        failed_tests += 1
                        log_message("-" * 40)
                        continue
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    log_message(f"–û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {expected_value}")
                    log_message(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {actual_value}")
                    
                    if actual_value == expected_value:
                        log_message(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
                        passed_tests += 1
                    else:
                        log_message(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù - –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                        failed_tests += 1
                
                except Exception as e:
                    log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
                    failed_tests += 1
                
                log_message("-" * 40)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_message("\nüìã –ò–¢–û–ì–ò –ë–ï–ù–ß–ú–ê–†–ö–û–í")
        log_message("=" * 50)
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        log_message(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        log_message(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_tests}")
        log_message(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö: {success_rate:.1f}%")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫
        if failed_tests > 0:
            log_message("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            log_message("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ benchmarks.yaml")
            log_message("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
            log_message("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–µ–Ω—á–º–∞—Ä–∫–∞—Ö")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")

def create_indexes(cursor, conn, index_file_path, max_index_lines):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π"""
    log_message("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    try:
        # –ß—Ç–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        log_message(f"–ß—Ç–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {index_file_path}")
        index_commands = []
        
        with open(index_file_path, 'r') as file:
            for i, line in enumerate(file):
                if i >= max_index_lines:
                    break
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                line = line.strip()
                if line and not line.startswith('--') and not line.startswith('/*'):
                    index_commands.append(line)
        
        log_message(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(index_commands)} –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        combined_command = "\n".join(index_commands)
        
        try:
            log_message("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π...")
            cursor.execute(combined_command)
            conn.commit()
            log_message("‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        except psycopg2.Error as e:
            conn.rollback()
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π
            log_message("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã...")
            for i, index_command in enumerate(index_commands):
                try:
                    cursor.execute(index_command)
                    conn.commit()
                except psycopg2.Error as e:
                    if "already exists" in str(e):
                        log_message(f"–ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–æ–º–∞–Ω–¥–∞ {i+1}): {index_command[:60]}...")
                    else:
                        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {i+1}: {index_command[:60]}...")
                        log_message(f"   –û—à–∏–±–∫–∞: {e}")
                    
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

    log_message("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def drop_materialized_views(cursor, conn, drop_commands):
    """–£–¥–∞–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π"""
    log_message("–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...")
    
    try:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã DROP –≤ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        combined_drop_command = "\n".join(drop_commands)
        
        try:
            log_message("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π...")
            cursor.execute(combined_drop_command)
            conn.commit()
            log_message("‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        except psycopg2.Error as e:
            conn.rollback()
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π
            log_message("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã...")
            for i, drop_command in enumerate(drop_commands):
                try:
                    log_message(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {drop_command}")
                    cursor.execute(drop_command)
                    conn.commit()
                    log_message("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                except psycopg2.Error as e:
                    log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ {i+1}): {e}")
    
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
    
    log_message("–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def refresh_materialized_view(only_benchmarks=False):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∏
    
    Args:
        only_benchmarks (bool): –ï—Å–ª–∏ True, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–Ω—á–º–∞—Ä–∫–∏ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    """
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_params = {
        'dbname': os.getenv('DB_NAME', 'dbname'),
        'user': os.getenv('DB_USER'),
        'password': os.getenv('DB_PASSWORD'), 
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': os.getenv('DB_PORT', '5432')
    }
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    drop_commands = [
        "drop materialized view if exists table1;",
        "drop materialized view if exists table2;",
    ]

    # –°–ø–∏—Å–æ–∫ SQL —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    base_path = '/Users/'
    sql_files = [
        f'{base_path}table1.sql',
        f'{base_path}table2.sql',
    ]
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è
    index_file_path = f'{base_path}index.sql'
    max_index_lines = 41  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –∏–Ω–¥–µ–∫—Å–æ–≤

    conn = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        log_message(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –Ω–∞ {db_params['host']}:{db_params['port']}")
        log_message(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_params['dbname']}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_params['user']}")
        
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        log_message("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")

        if not only_benchmarks:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            drop_materialized_views(cursor, conn, drop_commands)

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ SQL —Ñ–∞–π–ª–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for sql_file_path in sql_files:
                log_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {sql_file_path}")
                
                # –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞
                with open(sql_file_path, 'r') as file:
                    sql_command = file.read()
                
                log_message(f"SQL —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(sql_command)} –±–∞–π—Ç")

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∫–æ–º–∞–Ω–¥—ã
                log_message("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã...")
                cursor.execute(sql_command)
                conn.commit()
                log_message(f"SQL –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ {sql_file_path} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            create_indexes(cursor, conn, index_file_path, max_index_lines)
        else:
            log_message("–†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
        
        # –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        run_benchmarks(cursor)

    except (Exception, psycopg2.Error) as error:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL: {error}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if conn:
            cursor.close()
            conn.close()
            log_message("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤')
    parser.add_argument('--only-benchmarks', action='store_true', 
                        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–µ–Ω—á–º–∞—Ä–∫–∏ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π')
    args = parser.parse_args()
    
    if args.only_benchmarks:
        log_message("–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤")
        refresh_materialized_view(only_benchmarks=True)
    else:
        log_message("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
        refresh_materialized_view()
    
    log_message("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞") 
